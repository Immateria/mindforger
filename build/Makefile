# Copyright (C) 2016-2023 Martin Dvorak <martin.dvorak@mindforger.com>
#
# MindForger thinking notebook
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

.DEFAULT_GOAL := help

MINDFORGER_VERSION := 1.55.1
MINDFORGER_RELEASE_BASE_DIR := /home/dvorka/p/mindforger/release
MINDFORGER_RELEASE_DIR := $(MINDFORGER_RELEASE_BASE_DIR)/$(MINDFORGER_VERSION)-maker

MF_MAKER_WORKING_DIR := $(MINDFORGER_RELEASE_BASE_DIR)/maker-at-work

# class name like My_Class_Name used by C++ class generators
CLASS_NAME := "New_Class"
# l10n language: en, cs
MF_LANG := "en"
# Ubuntu distro: trusty xenial bionic focal jammy kinetic
DISTRO := "bionic"

.PHONY: help
help:
	@echo "MindForger Swiss knife help:"
	@echo "git-subs-update   update git submodules"
	@echo "gen-lib-class     generate lib C++ class skeleton: CLASS_NAME=My_Class"
	@echo "gen-ui-class      generate UI C++ class skeleton: CLASS_NAME=My_Class"
	@echo "clean             clean build artifacts"
	@echo "build             build MindForger application binary"
	@echo "l10n              update and release localization strings: MF_LANG=en"
	@echo "test-lib          compile and run lib/ unit tests"
	@echo "test-app          compile and run app/ integration tests"
	@echo "dist-all          build all distributions"
	@echo "dist-tarball      build tarball distribution"
	@echo "dist-deb          build Debian distribution"
	@echo "dist-rpm          build .rpm package on Fedora"
	@echo "dist-dmg          build macOS Disk iMaGe .dmg package"
	@echo "dist-debian-ppa   add .deb to aptly PPA"
	@echo "dist-ubuntu-deb   locally build .deb for any Ubuntu version:"
	@echo "dist-snap         build snap distro for snapcraft.io"
	@echo "                  DISTRO=focal"
	@echo "statistic         show source code statistic"
	@echo "doc-to-wiki       mindforger-documentation to mindforger.wiki"
	@echo "api-reference     generate Doxygen documentation"
	@echo "dev-install-local compile and install binary to ~/bin as MIND"


.PHONY: clean
clean:
	rm -vf ../app/mindforger
	rm -vf ../lib/libmindforger.a
	rm -vf ../lib/test/src/mindforger-lib-unit-tests
	cd .. && make clean
	cd ../lib/test && make clean


.PHONY: git-subs-update
git-subs-update:
	cd .. && git submodule update --init --recursive


.PHONY: gen-lib-class
gen-lib-class:
	@echo "Generating lib C++ class for name: $(CLASS_NAME)"
	./make/gen-cpp-class.py $(CLASS_NAME)


.PHONY: gen-ui-class
gen-ui-class:
	@echo "Generating UI C++ class for name: $(CLASS_NAME)"
	./make/gen-cpp-ui-class.py $(CLASS_NAME)


.PHONY: build
build: clean
	cd .. && qmake -r mindforger.pro && make -j 7
	@echo "If build succeeded, then MindForger executable can be found in:\n  app/mindforger"
	ls -al ../app/mindforger


build-ci: clean
	@echo "MindForger CI build..."
	cd .. && qmake CONFIG+=mfci -r mindforger.pro && make -j 7
	@echo "If CI build succeeded, then MindForger executable can be found in:\n  app/mindforger"
	ls -al ../app/mindforger


.PHONY: l10n
l10n:
	cd make && ./l10n-update-strings.sh && ./l10n-edit-and-release.sh $(MF_LANG)


.PHONY: ver-find
ver-find:
	cd .. && git grep "1\.55"


test-lib: clean
	cd make && ./test-lib-units.sh


.PHONY: dist-work-clean
dist-work-clean:
	rm -rvf $(MF_MAKER_WORKING_DIR)


$(MF_MAKER_WORKING_DIR):
	mkdir -vp $(MF_MAKER_WORKING_DIR)


$(MINDFORGER_RELEASE_DIR):
	mkdir -v $(MINDFORGER_RELEASE_DIR) || echo "$(MINDFORGER_RELEASE_DIR) already exists"


dist-tarball: dist-work-clean $(MF_MAKER_WORKING_DIR) $(MINDFORGER_RELEASE_DIR)
	@echo "Building TARBALL distribution..."
	mkdir -vp $(MF_MAKER_WORKING_DIR)
	cp -vf ./tarball/tarball-build.sh $(MF_MAKER_WORKING_DIR) && cd $(MF_MAKER_WORKING_DIR) && ./tarball-build.sh
	cp -vf $(MF_MAKER_WORKING_DIR)/`cd $(MF_MAKER_WORKING_DIR) && ls -d mindforger*`/mindforger_$(MINDFORGER_VERSION)_tarball.tgz $(MINDFORGER_RELEASE_DIR)


dist-deb: dist-work-clean $(MF_MAKER_WORKING_DIR) $(MINDFORGER_RELEASE_DIR)
	@echo "Building DEB distribution..."
	mkdir -vp $(MF_MAKER_WORKING_DIR)
	cp -vf ./debian/debian-make-deb.sh $(MF_MAKER_WORKING_DIR) && cd $(MF_MAKER_WORKING_DIR) && ./debian-make-deb.sh
	cp -vf $(MF_MAKER_WORKING_DIR)/`cd $(MF_MAKER_WORKING_DIR) && ls -d mindforger*`/mindforger_$(MINDFORGER_VERSION)-1_amd64.deb $(MINDFORGER_RELEASE_DIR)


.PHONY: dist-rpm
dist-rpm:
	@echo "IMPORTANT: this target MUST be run on Fedora!"
	cd fedora && ./fedora-distro-setup.sh
	@echo "Building .rpm package..."
	cp -vf ./fedora-rpm-from-deb.sh ~/alien && cd ~/alien && sudo ./fedora-rpm-from-deb.sh $(MINDFORGER_VERSION)
	@echo "Find .rpm in ~/alien directory"


.PHONY: dist-dmg
dist-dmg:
	@echo "Building .dmg package..."
	cd macos && ./mindforger-build.sh && ./dmg-package-build.sh


.PHONY: dist-debian-ppa
dist-debian-ppa:
	cd debian && ./debian-aptly-add-deb.sh


.PHONY: dist-ubuntu-deb
dist-ubuntu-deb:
	@echo "Building Ubuntu $(DISTRO) .deb ..."
	@echo "Copying latest version of .sh script to launchpad/ ..."
	@echo "Running .sh script ..."
	@echo "Copying .deb from build area to the current directory ..."
	false


.PHONY: dist-snap
dist-snap:
	@echo "Building Snap ..."
	echo "cd .. && make clean && cd build"
	echo "cp -vf snap/snapcraft.yaml .. && cd .. && snapcraft clean && snapcraft --debug"
	cp -vf snap/snapcraft.yaml .. && cd .. && snapcraft --debug


.PHONY: dist-all-clean
dist-all-clean:
	rm -rvf $(MINDFORGER_RELEASE_DIR)


dist-all: dist-all-clean $(MINDFORGER_RELEASE_DIR) dist-tarball dist-deb
	@echo "Building all $(MINDFORGER_VERSION) distributions"


.PHONY: statistic
statistic:
	cd make && ./statistic.sh


.PHONY: doc-to-wiki
doc-to-wiki:
	cd doc && ./mf-doc-to-wiki.py


.PHONY: api-reference
api-reference:
	cd doxygen && doxygen ./mindforger.cfg


dev-install-local: build-ci ../app/mindforger
	cp -vf ../app/mindforger ~/bin
	mv -vf ~/bin/mindforger ~/bin/mind
	~/bin/mind --version

# eof
